{"/home/travis/build/npmtest/node-npmtest-chai-things/test.js":"/* istanbul instrument in package npmtest_chai_things */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-things/lib.npmtest_chai_things.js":"/* istanbul instrument in package npmtest_chai_things */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chai_things = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chai_things = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-things/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chai-things && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chai_things */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chai_things\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chai_things.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chai_things.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chai_things.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chai_things.__dirname + '/lib.npmtest_chai_things.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-things/node_modules/chai-things/lib/chai-things.js":"(function (chaiModule) {\n  \"use strict\";\n  // NodeJS\n  if (typeof require === \"function\" && typeof exports === \"object\" && typeof module === \"object\")\n    module.exports = chaiModule;\n  // AMD\n  else if (typeof define === \"function\" && define.amd)\n    define(function () { return chaiModule; });\n  // Other\n  else\n    chai.use(chaiModule);\n}(function chaiAsPromised(chai, utils) {\n  \"use strict\";\n\n  var Assertion = chai.Assertion,\n      assertionPrototype = Assertion.prototype,\n      expect = chai.expect,\n      containPropertyDesc = Object.getOwnPropertyDescriptor(assertionPrototype, 'contain');\n  Object.defineProperty(assertionPrototype, 'contains', containPropertyDesc);\n  Object.defineProperty(assertionPrototype, 'includes', containPropertyDesc);\n\n  // Handles the `something` chain property\n  function chainSomething() {\n    // `include` or `contains` should have been called before\n    if (!utils.flag(this, \"contains\"))\n      throw new Error(\"cannot use something without include or contains\");\n    // Flag that this is a `something` chain\n    var lastSomething = this, newSomething = {};\n    while (utils.flag(lastSomething, \"something\"))\n      lastSomething = utils.flag(lastSomething, \"something\");\n    // Transfer all the flags to the new `something` and remove them from `this`\n    utils.transferFlags(this, newSomething, false);\n    for (var prop in this.__flags)\n      if (!/^(?:something|object|ssfi|message)$/.test(prop))\n        delete this.__flags[prop];\n\n    // Add the `newSomething` to the `lastSomething` in the chain.\n    utils.flag(lastSomething, \"something\", newSomething);\n    // Clear the `something` flag from `newSomething`.\n    utils.flag(newSomething, \"something\", false);\n  }\n\n  // Performs the `something()` assertion\n  function assertSomething() {\n    // Undo the flags set by the `something` chain property\n    var somethingFlags = utils.flag(this, \"something\");\n    utils.flag(this, \"something\", false);\n    if (somethingFlags)\n      utils.transferFlags(somethingFlags, this, true);\n\n    // The assertion's object for `something` should be array-like\n    var object = utils.flag(this, \"object\");\n    expect(object).to.have.property(\"length\");\n    expect(object.length).to.be.a(\"number\", \"something object length\");\n\n    // The object should contain something\n    this.assert(object.length > 0,\n      \"expected #{this} to contain something\",\n      \"expected #{this} not to contain something\"\n    );\n  }\n\n  // Handles the `all` chain property\n  function chainAll() {\n    // Flag that this is an `all` chain\n    var lastAll = this, newAll = {};\n    while (utils.flag(lastAll, \"all\"))\n      lastAll = utils.flag(lastAll, \"all\");\n    // Transfer all the flags to the new `all` and remove them from `this`\n    utils.transferFlags(this, newAll, false);\n    for (var prop in this.__flags)\n      if (!/^(?:all|object|ssfi|message)$/.test(prop))\n        delete this.__flags[prop];\n\n    // Add the `newAll` to the `lastAll` in the chain.\n    utils.flag(lastAll, \"all\", newAll);\n    // Clear the `all` flag from `newAll`.\n    utils.flag(newAll, \"all\", false);\n  }\n\n  // Find all assertion methods\n  var methodNames = Object.getOwnPropertyNames(assertionPrototype)\n    .filter(function (propertyName) {\n      var property = Object.getOwnPropertyDescriptor(assertionPrototype, propertyName);\n      return typeof property.value  === \"function\";\n    });\n\n  // Override all assertion methods\n  methodNames.forEach(function (methodName) {\n\n    // Override the method to react on a possible `something` in the chain\n    Assertion.overwriteMethod(methodName, function (_super) {\n      return function somethingMethod() {\n        // Return if no `something` has been used in the chain\n        var somethingFlags = utils.flag(this, \"something\");\n        if (!somethingFlags)\n          return _super.apply(this, arguments);\n        // Use the nested `something` flag as the new `something` flag for this.\n        utils.flag(this, \"something\", utils.flag(somethingFlags, \"something\"));\n\n        // The assertion's object for `something` should be array-like\n        var arrayObject = utils.flag(this, \"object\");\n        expect(arrayObject).to.have.property(\"length\");\n        var length = arrayObject.length;\n        expect(length).to.be.a(\"number\", \"something object length\");\n\n        // In the negative case, an empty array means success\n        var negate = utils.flag(somethingFlags, \"negate\");\n        if (negate && !length)\n          return;\n        // In the positive case, the array should not be empty\n        new Assertion(arrayObject).assert(length,\n          \"expected #{this} to contain something\");\n\n        // Try the assertion on every array element\n        var assertionError;\n        for (var i = 0; i < length; i++) {\n          // Test whether the element satisfies the assertion\n          var item = arrayObject[i],\n              itemAssertion = copyAssertion(this, item, somethingAssert);\n          assertionError = null;\n          try { somethingMethod.apply(itemAssertion, arguments); }\n          catch (error) { assertionError = error; }\n          // If the element satisfies the assertion\n          if (!assertionError) {\n            // In case the base assertion is negated, a satisfying element\n            // means the base assertion (\"no element must satisfy x\") fails\n            if (negate) {\n              if (!utils.flag(somethingFlags, \"something\")) {\n                // If we have no child `something`s then assert the negated item assertion,\n                // which should fail and throw an error\n                var negItemAssertion = copyAssertion(this, item, somethingAssert, true);\n                somethingMethod.apply(negItemAssertion, arguments);\n              }\n              // Throw here if we have a child `something`,\n              // or if the negated item assertion didn't throw for some reason\n              new Assertion(arrayObject).assert(false,\n                  \"expected no element of #{this} to satisfy the assertion\");\n            }\n            // In the positive case, a satisfying element means the assertion holds\n            return;\n          }\n        }\n        // Changes the assertion message to an array viewpoint\n        function somethingAssert(test, positive, negative, expected, actual) {\n          var replacement = (negate ? \"no\" : \"an\") + \" element of #{this}\";\n          utils.flag(this, \"object\", arrayObject);\n          assertionPrototype.assert.call(this, test,\n            (negate ? negative : positive).replace(\"#{this}\", replacement),\n            (negate ? positive : negative).replace(\"#{this}\", replacement),\n            expected, actual);\n        }\n        // If we reach this point, no element that satisfies the assertion has been found\n        if (!negate)\n          throw assertionError;\n      };\n    });\n\n    // Override the method to react on a possible `all` in the chain\n    Assertion.overwriteMethod(methodName, function (_super) {\n      return function allMethod() {\n        // Return if no `all` has been used in the chain\n        var allFlags = utils.flag(this, \"all\");\n        if (!allFlags)\n          return _super.apply(this, arguments);\n        // Use the nested `all` flag as the new `all` flag for this.\n        utils.flag(this, \"all\", utils.flag(allFlags, \"all\"));\n\n        // The assertion's object for `all` should be array-like\n        var arrayObject = utils.flag(this, \"object\");\n        expect(arrayObject).to.have.property(\"length\");\n        var length = arrayObject.length;\n        expect(length).to.be.a(\"number\", \"all object length\");\n\n        // In the positive case, an empty array means success\n        var negate = utils.flag(allFlags, \"negate\");\n        if (!negate && !length)\n          return;\n\n        // Try the assertion on every array element\n        var assertionError, item, itemAssertion;\n        for (var i = 0; i < length; i++) {\n          // Test whether the element satisfies the assertion\n          item = arrayObject[i];\n          itemAssertion = copyAssertion(this, item, allAssert);\n          assertionError = null;\n          try { allMethod.apply(itemAssertion, arguments); }\n          catch (error) { assertionError = error; }\n          // If the element does not satisfy the assertion\n          if (assertionError) {\n            // In the positive case, this means the assertion has failed\n            if (!negate) {\n                // If we have no child `all`s then throw the item's assertion error\n              if (!utils.flag(allFlags, \"all\"))\n                throw assertionError;\n              // Throw here if we have a child `all`,\n              new Assertion(arrayObject).assert(false,\n                  \"expected all elements of #{this} to satisfy the assertion\");\n            }\n            // In the negative case, a failing element means the assertion holds\n            return;\n          }\n        }\n        // Changes the assertion message to an array viewpoint\n        function allAssert(test, positive, negative, expected, actual) {\n          var replacement = (negate ? \"not \" : \"\") + \"all elements of #{this}\";\n          utils.flag(this, \"object\", arrayObject);\n          assertionPrototype.assert.call(this, test,\n            (negate ? negative : positive).replace(\"#{this}\", replacement),\n            (negate ? positive : negative).replace(\"#{this}\", replacement),\n            expected, actual);\n        }\n        // If we reach this point, no failing element has been found\n        if (negate) {\n          // Assert the negated item assertion which should fail and throw an error\n          var negItemAssertion = copyAssertion(this, item, allAssert, true);\n          allMethod.apply(negItemAssertion, arguments);\n          // Throw here if the negated item assertion didn't throw for some reason\n          new Assertion(arrayObject).assert(false,\n            \"expected not all elements of #{this} to satisfy the assertion\");\n        }\n      };\n    });\n  });\n\n  // Copies an assertion to another item, using the specified assert function\n  function copyAssertion(baseAssertion, item, assert, negate) {\n    var assertion = new Assertion(item);\n    utils.transferFlags(baseAssertion, assertion, false);\n    assertion.assert = assert;\n    if (negate)\n      utils.flag(assertion, \"negate\", !utils.flag(assertion, \"negate\"));\n    return assertion;\n  }\n\n  // Define the `something` chainable assertion method and its variants\n  [\"something\", \"thing\", \"item\", \"one\", \"some\", \"any\"].forEach(function (methodName) {\n    if (!(methodName in assertionPrototype))\n      Assertion.addChainableMethod(methodName, assertSomething, chainSomething);\n  });\n  // Define the `all` chainable assertion method\n  Assertion.addChainableMethod(\"all\", null, chainAll);\n}));\n"}